# Lists all the functions in this file
function functions () {
  grep 'function ' ~/.functions | cut -d ' ' -f 2
}

# Use ditto to make a nice, recursive zip without resource forks
function dzip () {
  ditto -ck --norsrc --keepParent $1 $1.zip
}

# Make a directory, cd into it
function md () {
  mkdir -p "$@" && cd "$@"
}

# Make a tar.gz file
function mktgz () {
  tar -czf $1.tgz $1;
}

# Create a data URL from an image (works for other file types too, if you tweak the Content-Type afterwards)
function dataurl () {
  echo "data:image/${1##*.};base64,$(openssl base64 -in "$1")" | tr -d '\n'
}

# Determine size of a file or total size of a directory
function fs () {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# Get gzipped file size
function gz () {
  echo "orig size (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

# Base64 image to clipboard
function b64copy () {
  cat "$1" | openssl base64 | tr -d '\n' | pbcopy
}

# Opens the Sublime project in the current folder or defaults to just the folder
function ss () {
  PROJ=`find . -name ./*.sublime-project | awk 'NR==1'`

  if [ -z "$PROJ" ]; then
    subl .
  else
    subl $PROJ
  fi
}

# Install a grunt plugin and save to devDependencies
function gi () {
  npm install --save-dev grunt-"$@"
}

# Install a grunt-contrib plugin and save to devDependencies
function gci () {
  npm install --save-dev grunt-contrib-"$@"
}

# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}

# Hide errors for npm ls
function npmls () {
  npm ls --depth=0 $@ 2>/dev/null
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  # open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Get separate function files
source ~/.functions-browsers
source ~/.functions-browserstack
